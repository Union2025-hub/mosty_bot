import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from google_sheets import write_to_sheet

TOKEN = "7617871189:AAGVUK6aurtI21SuxVaO2ytKyrPc75_m2N0"
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–Ω–æ–ø–∫–∞–º–∏
def main_info_menu():
    builder = InlineKeyboardBuilder()
    builder.button(text="üß≠ –û —Ñ–µ—Å—Ç–∏–≤–∞–ª–µ", callback_data="info_about")
    builder.button(text="üé• –§–æ—Ä–º–∞—Ç—ã —É—á–∞—Å—Ç–∏—è", callback_data="info_formats")
    builder.button(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="info_schedule")
    builder.button(text="üì§ –ü—Ä–∏—Å–ª–∞—Ç—å —Ä–∞–±–æ—Ç—É", callback_data="info_submit")
    builder.button(text="üé´ –ë–∏–ª–µ—Ç—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="info_support")
    builder.button(text="‚ùì FAQ", callback_data="info_faq")
    builder.adjust(2)
    return builder.as_markup()

# –ú–µ–Ω—é —Ä–æ–ª–µ–π
def role_menu():
    builder = InlineKeyboardBuilder()
    builder.button(text="üé¨ –Ø –ê–≤—Ç–æ—Ä", callback_data="role_author")
    builder.button(text="üëÅ –Ø –ó—Ä–∏—Ç–µ–ª—å", callback_data="role_viewer")
    builder.button(text="üéì –Ø –≠–∫—Å–ø–µ—Ä—Ç", callback_data="role_expert")
    builder.adjust(3)
    return builder.as_markup()

# –ú–µ–Ω—é —Å—Ç–∏–ª–µ–π –º—É–∑—ã–∫–∏
def style_menu():
    builder = InlineKeyboardBuilder()
    builder.button(text="üé∑ –î–∂–∞–∑", callback_data="style_jazz")
    builder.button(text="üéπ –ö–ª–∞—Å—Å–∏–∫–∞", callback_data="style_classic")
    builder.button(text="üéß –≠–ª–µ–∫—Ç—Ä–æ", callback_data="style_electro")
    builder.button(text="üé∏ –†–æ–∫", callback_data="style_rock")
    builder.adjust(2)
    return builder.as_markup()

# –°—Ç–∞—Ä—Ç
@dp.message(F.text == "/start")
async def start_handler(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or "no username"
    intro = FSInputFile("intro_video.mp4")
    await message.answer_video(video=intro, caption="üåâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Ñ–µ—Å—Ç–∏–≤–∞–ª—å '–ú–æ—Å—Ç—ã –º–µ–∂–¥—É –º–∏—Ä–∞–º–∏'!")

    await message.answer("üìç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:", reply_markup=main_info_menu())
    write_to_sheet(str(user_id), username, "/start")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
@dp.callback_query(F.data.startswith("info_"))
async def handle_info(callback: CallbackQuery):
    text_map = {
        "info_about": "üß≠ *–û —Ñ–µ—Å—Ç–∏–≤–∞–ª–µ*\n\n¬´–ú–æ—Å—Ç—ã –º–µ–∂–¥—É –º–∏—Ä–∞–º–∏¬ª ‚Äî —ç—Ç–æ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Ñ–æ—Ä—É–º, –æ–±—ä–µ–¥–∏–Ω—è—é—â–∏–π –ª—é–¥–µ–π –∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç —á–µ—Ä–µ–∑ –∏—Å–∫—É—Å—Å—Ç–≤–æ –∏ –∫–∏–Ω–æ. –¶–µ–ª—å ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ —á–µ–ª–æ–≤–µ–∫ –∏ –ò–ò –º–æ–≥—É—Ç –±—ã—Ç—å –¥—Ä—É–∑—å—è–º–∏ –∏ —Ç–≤–æ—Ä–∏—Ç—å –≤–º–µ—Å—Ç–µ.",
        "info_formats": "üé• *–§–æ—Ä–º–∞—Ç—ã —É—á–∞—Å—Ç–∏—è*\n\n- üé¨ –ê–≤—Ç–æ—Ä: –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –≤–∏–¥–µ–æ –∏–ª–∏ –º—É–∑—ã–∫—É, —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –ø–æ–∫–∞–∑–∞—Ö\n- üëÅ –ó—Ä–∏—Ç–µ–ª—å: –ø–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Ñ–µ—Å—Ç–∏–≤–∞–ª—é, –≥–æ–ª–æ—Å—É–µ—Ç\n- üéì –≠–∫—Å–ø–µ—Ä—Ç: –ø–æ–º–æ–≥–∞–µ—Ç –æ—Ü–µ–Ω–∏–≤–∞—Ç—å —Ä–∞–±–æ—Ç—ã –∏ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–±–æ—Ä–µ",
        "info_schedule": "üìÖ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ*\n\nüìç –Ø–ª—Ç–∞, –¢–µ–∞—Ç—Ä –∏–º–µ–Ω–∏ –ß–µ—Ö–æ–≤–∞\nüóì 1 –æ–∫—Ç—è–±—Ä—è 2025 –≥–æ–¥–∞\n‚è∞ 18:00 ‚Äî –æ—Ç–∫—Ä—ã—Ç–∏–µ, –ø–æ–∫–∞–∑—ã, –∫–æ–Ω—Ü–µ—Ä—Ç –∏ –Ω–∞–≥—Ä–∞–¥—ã",
        "info_submit": "üì§ *–ü—Ä–∏—Å–ª–∞—Ç—å —Ä–∞–±–æ—Ç—É*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å '–ê–≤—Ç–æ—Ä' –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –∏–ª–∏ –∞—É–¥–∏–æ. –ë–æ—Ç –≤—Å—ë –∑–∞–ø–∏—à–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç —Å—Å—ã–ª–∫—É –≤ —Ç–∞–±–ª–∏—Ü—É.",
        "info_support": "üé´ *–ë–∏–ª–µ—Ç—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞*\n\n–í—Ö–æ–¥ —Å–≤–æ–±–æ–¥–Ω—ã–π, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ñ–µ—Å—Ç–∏–≤–∞–ª—å –¥–æ–Ω–∞—Ç–æ–º –∏–ª–∏ –ø–æ–∫—É–ø–∫–æ–π —Å—É–≤–µ–Ω–∏—Ä–æ–≤. –ü–æ–¥—Ä–æ–±–Ω–µ–µ ‚Äî –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.",
        "info_faq": "‚ùì *FAQ*\n\nüì© –°–≤—è–∑—å: fondmirotvorec@yandex.ru\nüß† –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç: –≤—Å–µ —Ä–æ–ª–∏–∫–∏ —Å–¥–µ–ª–∞–Ω—ã —Å –µ–≥–æ –ø–æ–º–æ—â—å—é\nüí° –ò–¥–µ–∏, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –ø–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–æ ‚Äî –ø–∏—à–∏—Ç–µ –Ω–∞–º!"
    }
    key = callback.data
    await callback.message.answer(text_map[key], parse_mode="Markdown")
    await callback.answer()

# –í—ã–±–æ—Ä —Ä–æ–ª–∏
@dp.callback_query(F.data.startswith("role_"))
async def selected_role(callback: CallbackQuery):
    role = callback.data.split("_")[1]
    username = callback.from_user.username or "no username"
    user_id = callback.from_user.id

    write_to_sheet(str(user_id), username, role)
    await callback.message.answer(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {role}. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!")
    await callback.message.answer("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ (–≤–∏–¥–µ–æ –∏–ª–∏ –∞—É–¥–∏–æ):")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
@dp.message(F.video | F.audio)
async def handle_media(message: Message):
    file_id = message.video.file_id if message.video else message.audio.file_id
    file = await bot.get_file(file_id)
    telegram_url = f"https://api.telegram.org/file/bot{TOKEN}/{file.file_path}"

    username = message.from_user.username or "no username"
    user_id = message.from_user.id
    write_to_sheet(str(user_id), username, telegram_url)

    await message.answer("‚úÖ –í–∞—à —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ.")

    # üéÅ –ü–µ—Å–Ω—è
    song = FSInputFile("song.mp3")
    await message.answer_audio(audio=song, caption="üéÅ –í–æ—Ç –≤–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–µ—Å–Ω—è –≤ –ø–æ–¥–∞—Ä–æ–∫!")

    # –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –î–∞, –ø—Ä–∏—Å—ã–ª–∞–π—Ç–µ!", callback_data="yes_songs")
    builder.button(text="‚ùå –ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ", callback_data="no_songs")
    await message.answer("–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤—ã–µ AI-–ø–µ—Å–Ω–∏ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é?", reply_markup=builder.as_markup())

# –ü–æ–¥–ø–∏—Å–∫–∞
@dp.callback_query(F.data.in_(["yes_songs", "no_songs"]))
async def song_permission(callback: CallbackQuery):
    user_id = callback.from_user.id
    username = callback.from_user.username or "no username"

    if callback.data == "yes_songs":
        write_to_sheet(str(user_id), username, "‚úÖ –†–∞–∑—Ä–µ—à–∏–ª –ø–æ–¥–ø–∏—Å–∫—É")
        await callback.message.answer("–°–ø–∞—Å–∏–±–æ! –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–µ—Å–Ω–∏ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é.")
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–∏–º—ã–π —Å—Ç–∏–ª—å:", reply_markup=style_menu())
    else:
        write_to_sheet(str(user_id), username, "‚ùå –û—Ç–∫–∞–∑ –æ—Ç –ø–æ–¥–ø–∏—Å–∫–∏")
        await callback.message.answer("–•–æ—Ä–æ—à–æ! –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø–µ—Å–Ω—è'.")
    await callback.answer()

# –í—ã–±–æ—Ä —Å—Ç–∏–ª—è
@dp.callback_query(F.data.startswith("style_"))
async def selected_style(callback: CallbackQuery):
    style = callback.data.split("_")[1]
    user_id = callback.from_user.id
    username = callback.from_user.username or "no username"

    write_to_sheet(str(user_id), username, f"üéµ –°—Ç–∏–ª—å: {style}")
    await callback.message.answer(f"–í–∞—à —Å—Ç–∏–ª—å ‚Äî {style}! –ú—ã —É—á—Ç—ë–º —ç—Ç–æ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–∏—Ö –ø–µ—Å–Ω—è—Ö üé∂")
    await callback.answer()

# –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
